{
    "EXTERNAL::print": {
        "version": null,
        "generated_on": null,
        "generated_docs": null
    },
    "data_processor::DataProcessor.check_emails": {
        "version": 1,
        "generated_on": "2024-06-25 23:04:25",
        "generated_docs": "# data_processor.py\n\n\n## ClassDef DataProcessor\n\n\nThe function of the class is to process user data. It provides a method for validating email addresses.\n\n\n**Attributes**: None\n\n\n**Functions**:\n\n\n- `check_emails` (`self`, `emails`: `list`) -> `list`\n    - Parameters:\n        - `self` (`object`): The instance of the DataProcessor class.\n        - `emails` (`list`): A list of email addresses to be validated.\n    - Returns:\n        - `list`: A list of valid email addresses."
    },
    "data_processor::DataProcessor.process_data": {
        "version": 1,
        "generated_on": "2024-06-25 23:04:44",
        "generated_docs": "# data_processor.py\n\n## ClassDef DataProcessor\n\nThe function of the class is to process input data by converting each item into uppercase.\n\n**Attributes**: None\n\n**Functions**:\n\n- `process_data` (`self`, `data`) -> `list`\n    - Parameters:\n        - `data` (`list`): A list containing strings that need to be processed.\n    - Returns:\n        - A list of uppercase strings, where each item in the input list has been converted to uppercase.\n\n**Called_functions**: None\n\n**Code Description**: This class contains a single method, process_data, which takes a list of strings as input and returns a new list with each string converted to uppercase. The function uses a list comprehension to iterate over the input data, applying the upper() method to each item in turn.\n\n**Note**: This function can be used to preprocess text data for further analysis or processing.\n\n**Input Example**: \n\n```\ninput_data = [\"hello\", \"world\", \"example\"]\noutput_data = processor.process_data(input_data)\nprint(output_data)  # Output: [\"HELLO\", \"WORLD\", \"EXAMPLE\"]\n```\n\n**Output Example**: \n```\n\"HELLO\"\n\"WORLD\"\n\"EXAMPLE\"\n```"
    },
    "main::(global)": {
        "version": 1,
        "generated_on": "2024-06-25 23:05:25",
        "generated_docs": "main.py\n\n## ClassDef User\n\nThe function of the class is to create an instance with a first name and email address.\n\n**Attributes**:\n\n- `first_name` (`str`): The user's first name.\n- `email_address` (`str`): The user's email address.\n\n**Functions**: None\n\n**Code Description**: The User class initializes an instance with a first name and email address. It can be used to create users in the system.\n\n**Note**: This code demonstrates how to use the User class by creating an instance and printing it out.\n\n**Input Example**: \n\n```\nuser = User('John Doe', 'john.doe@example.com')\n```\n\n**Output Example**: \n\n```\nUser: John Doe, john.doe@example.com\n```"
    },
    "main::main": {
        "version": 1,
        "generated_on": "2024-06-25 23:06:20",
        "generated_docs": "main.py\n\n## ClassDef User\n\nThe function of the class is to create user objects. This class represents a user with their name and email.\n\n**Attributes**:\n\n- `id` (`type`: uuid.uuid4): The unique identifier for the user, automatically generated when an instance of this class is created.\n- `name` (`str`): The name of the user.\n- `email` (`str`): The email address of the user.\n\n## FunctionDef main\n\nThe function of this function is to demonstrate how a User object and DataProcessor can be used together. This function creates a new User object, prints it out, uses the DataProcessor to process some data, and then prints out the processed data.\n\n**Parameters**:\n\n- `None` (no parameters required): This is a standalone function that does not require any input.\n\n**Returns**:\n\n- `None`: This function does not return any values.\n\n**Called_functions**:\n\n- `DataProcessor()` -> `object`: Creates an instance of the DataProcessor class, which is used to process data.\n- `User('John Doe', 'john.doe@example.com')` -> `User object`: Creates a new User object with the given name and email.\n- `processor.process_data(data)` -> `processed_data`: Uses the DataProcessor to process some sample data.\n\n**Code Description**: This function serves as an example of how to use a User object and DataProcessor together. It creates a new user, prints them out, processes some sample data using the DataProcessor, and then prints out the processed data.\n\n**Note**: The input for this function is implicit, as it uses existing objects. However, if you were to write your own code that called this function, you would pass in the necessary parameters (i.e., creating a new User object with specific name and email).\n\n**Input Example**: \n\n```\nThere is no need for an explicit input example here.\n```\n\n**Output Example**: \n\n```\nThe output will be the processed data, which is a list of strings where each string is the original word in uppercase.\n```"
    },
    "user::User.__init__": {
        "version": 1,
        "generated_on": "2024-06-25 23:07:24",
        "generated_docs": "user.py\n\n## ClassDef User\n\nThe function of the class is to represent a user with unique identifier, name, and email address.\n\n**Attributes**:\n\n- `id` (`uuid.UUID`): Unique identifier assigned to each user.\n- `name` (`str`): Name of the user.\n- `email` (`str`): Email address of the user.\n\nThe constructor initializes the attributes of a user. It generates a unique identifier for the user using UUID and sets the provided name and email.\n\n**Code Description**: The User class represents a basic entity with identification, name, and contact information, which can be used as a starting point for more complex user models or profiles.\n\nThere are no special points to note about the use of this code according to its returns."
    },
    "utils::validate_email": {
        "version": 1,
        "generated_on": "2024-06-25 23:08:05",
        "generated_docs": "# utils.py\n\n## validate_email\nThe function of the `validate_email` is to check whether a given email address follows a specific pattern or not.\n\n**Attributes**:\n\nNone\n\n**Functions**:\n\n- `validate_email(email): bool`\n    - Parameters:\n        - `email`: The email address to be validated.\n    - Returns:\n        - `bool`: Returns True if the email address matches the pattern, False otherwise.\n\n**Called_functions**:\n\nNone\n\n**Code Description**: This function uses a regular expression pattern to validate an email address. It checks if the given email address matches this pattern and returns True if it does or False otherwise.\n\n**Note**: The regular expression pattern used in this function is '^[a-z0-9]+[\\\\._]?[a-z0-9]+[@]\\\\w+[.]\\\\w+$'. This pattern checks for the presence of alphanumeric characters, dots, underscores, at symbol, and domain name. It ensures that the email address contains a valid domain with one or more top-level domains.\n\n**Input Example**: \n\n```\nExample input: example@gmail.com\n```\n\n**Output Example**: \n\n```\nOutput: True (if the email address matches the pattern) or False (if it does not match the pattern).\n```"
    }
}